# What is this all about?

Well, are you using Gulp? Did you ever had the problem, that your gulpfile.js gets really big and messy?
Or did you need configuration, depending on environment (development, production, etc.)?

Gulp-Pilot aims to solve those obstacles.
No more gulp-spaghetti tasks, keeping your tasks DRY, clear and structured.

# Installation

Install `gulp-pilot` as a development dependency:

```shell
npm install --save-dev gulp-pilot
```

# Usage

After you have installed this plugin you can utilize it in your gulpfile.js.

Basically tasks are just javascript modules, though you can also group tasks
and have multiple tasks defined in one module (subtasks).

Let's assume the following folder structure:

```shell
|-- dist/
|-- node_modules/
|-- src/
    |-- ...
|-- gulp/
    |-- foo.js
    |-- bar.js
|-- gulpfile.js
|-- package.json
|-- README.md
```

## Task implementation factories

Those are just functions you would export out of your module, who return a function that implements the task.
Each factory gets invoked with *3 parameters*:

- gulp - The gulp instance
- $ - The gulp-load-plugins instance hash.
- [config] - The default config, a specified config, or a merged version of both (optional).

> gulp/foo.js

````javascript
module.exports = function(gulp, $, config) {
    return function() {
        return gulp.src('Yours glob pattern here')
            .pipe('...')
            .pipe(gulp.dest('your path here');
    };
}
````

> gulp/bar.js

````javascript
module.exports = function(gulp, $, config) {
    return function() {
        return gulp.src('Another glob pattern here')
            .pipe('...')
            .pipe(gulp.dest('Another path here');
    };
}
````

> gulpfile.js

````javascript
var gulp = require('gulp');
var pilot = require('gulp-pilot');

pilot.task('foo');

pilot.task('bar', ['foo'])
````


## Subtasks

Those are just functions you would export out of your module, who return plain object literals.
Who's Properties represent one subtask's implementation.

Each subtask is selected by the colon (:) delimiter in your name, e.g. `"filename:subtask"`.
Nesting is possible like `"filename:namespace:subtask"`.

Even paths are supported, like `"path/filename"`, `"path/filename:subtask"` or `"path/filename:namespace:subtask"`

> gulp/foo.js

````javascript
module.exports = function(gulp, $, config) {
    return {
        sub1: function() {
            return gulp.src('Yours glob pattern here')
                .pipe('...')
                .pipe(gulp.dest('your path here');
        },

        sub2: function() {
            return gulp.src('Yours glob pattern here')
                .pipe('...')
                .pipe(gulp.dest('your path here');
        }
    };
}
````

> gulp/bar.js

````javascript
module.exports = function(gulp, $, config) {
    return function() {
        gulp.src('Another glob pattern here')
            .pipe('...')
            .pipe(gulp.dest('Another path here');
    };
}
````

> gulpfile.js

````javascript
var gulp = require('gulp');
var pilot = require('gulp-pilot');

pilot.task('foo:sub1');
pilot.task('foo:sub2');

gulp.task('foo', ['foo:sub1', 'foo:sub2']);

pilot.task('bar', ['foo'])
````

# Configuration

Optionally you can have a config hash available for each task.
Gulp-Pilot always scans your root directory for `<package.name>.conf.{js|json}` file,
which will be the default config, see following examples:

> project.conf.js

````javascript
module.exports = {
    path: {
        src: 'src/',
        dist: 'dist',
    }
};
````

> project.conf.json

````json
{
    "path": {
        "src": "src/",
        "dist": "dist/"
    }
}
````

## CLI Options

If you need to load different config files, e.g. one for production, the other for development.
You can, either by merging with your default config, or without merging.

````shell
# custom config, will merge by default (you can change this in your `pilotrc` file)
gulp [any task] -c custom.conf.js

# force merging
gulp [any task] -c custom.conf.js -m

# avoid mergin
gulp [any task] -c custom.conf.js -i
````

| Flag | Description | Type |
| --- | --- | --- |
| --help | Show help | `boolean` |
| --config, -c | Load a config file by path - for relative paths see CWD and __dirname below | `string` |
| --merge-default-config, -m | Just use this flag to merge supplied config with default config | `boolean` |
| --ignore-default-config, -i | Just use this flag to ignore default config (no merging) | `boolean` |

# API Documentation

{{>main}}

#License

{{rawinclude 'LICENSE'}}